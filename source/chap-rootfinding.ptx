<?xml version="1.0" encoding="UTF-8" ?>

<!--********************************************************************
Copyright 2020 Sean M. Laverty

This file is part of MathBook XML.

MathBook XML is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 or version 3 of the
License (at your option).

MathBook XML is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with MathBook XML. If not, see <http://www.gnu.org/licenses/>.
*********************************************************************-->
<!-- ....... .............. .............. ....... -->
<!-- ....... .............. .............. ....... -->
<!-- ....... .............. .............. ....... -->
<!-- ....... .............. .............. ....... -->
<!-- ....... .............. .............. ....... -->

<chapter xml:id="chap-rootfinding"
xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>Root-finding and fixed-point problems</title>

 <introduction>
 <p>

<!--> <p>We will learn and practice direct methods for computing derivatives
of functions defined by products or quotients of terms.</p>

 <p>The theory of groups occupies a central position in mathematics.
Modern group theory arose from an attempt to find the roots of a
polynomial in terms of its coefficients. Groups now play a central role
in such areas as coding theory, counting, and the study of symmetries;
many areas of biology, chemistry, and physics have benefited from group
theory.</p>-->

</p>
 </introduction>
        <xi:include href="./sec_rootfinding.ptx" />

	<section xml:id="introduction">
	<title>Introduction</title>


	<subsection xml:id="polynomial-form-and-evaluation-speed">
	<title>Polynomial form and evaluation speed</title>

<p>
	To explore the relationship between computational time
and polynomial form, consider three forms of the same polynomial
<me>\begin{aligned}{2}
f_1(x) &amp; = x^5 - 15x^4 + 85x^3 - 225x^2 + 274x -120 &amp;&amp;
\quad\text{(normal)}\\

f_2(x) &amp; = (x - 1)(x - 2)(x - 3)(x - 4)(x - 5) &amp;&amp;
\quad\text{(factored)}\\

f_3(x) &amp; = -120 + x(274 + x(-225 + x(85 + x(-15 + x)))) &amp;&amp;
\quad\text{(nested)}\end{aligned}</me> We can evaluate each function at
1000 randomly generated points (to be used for all functions and all
replicates) and, using an R package called microbenchmark, repeat this
experiment 1000 times for each form. Results of this experiment are
given in Figure <xref ref="fig-poly-eval" />.
</p>

	<figure xml:id="fig-poly-eval">
	<image source="1_basics/polynomial_evaluation_plot.png"/>
	<caption>Median computing times (measured execution time
in microseconds) are 607.1064 for <m>f_1</m>, 511.8887 for <m>f_2</m>,
and 516.9337 for <m>f_3</m>.</caption>
</figure>

<p>
	With respect to class, you might ask yourself why we
have emphasized nesting, but not factoring, when it comes to working
with polynomials.
</p>

	</subsection>
	</section>



</chapter>
